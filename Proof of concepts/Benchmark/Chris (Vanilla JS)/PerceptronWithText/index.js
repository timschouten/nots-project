//Look at all the words
// check how many words are in rich and how many in poor
// if this is more than
let ULTI = [
	2,
	-2,
	1,
	-3,
	-4,
	-11,
	5,
	-7,
	-22,
	-19,
	1,
	-50,
	-13,
	-26,
	0,
	-3,
	-2,
	1,
	-3,
	-4,
	-7,
	-1,
	-4,
	-22,
	-19,
	-50,
	-50,
	-4,
	-26,
	0,
	-2,
	-22,
	1,
	-11,
	-11,
	-4,
	3,
	-7,
	-22,
	-19,
	-50,
	-50,
	-13,
	-26,
	0,
	3,
	-22,
	1,
	4,
	4,
	-7,
	3,
	-4,
	-6,
	-19,
	-50,
	-50,
	-13,
	-26,
	0,
	1,
	-22,
	1,
	-3,
	-4,
	-7,
	0,
	3,
	-6,
	-7,
	-50,
	-50,
	-13,
	1,
	0,
	0,
	-22,
	1,
	0,
	0,
	-7,
	-1,
	3,
	-22,
	-7,
	-50,
	-50,
	-13,
	-26,
	0,
	3,
	-22,
	1,
	3,
	3,
	1,
	3,
	-7,
	-6,
	-7,
	-50,
	-50,
	0,
	1,
	0,
	0,
	-2,
	0,
	-11,
	-11,
	-7,
	-1,
	-4,
	-22,
	-19,
	-50,
	-50,
	0,
	-26,
	0,
	1,
	-22,
	0,
	0,
	0,
	-11,
	0,
	-7,
	-22,
	-7,
	0,
	-50,
	-3,
	-26,
	0,
	0,
	-22,
	0,
	-3,
	-4,
	-7,
	-1,
	-4,
	-22,
	-19,
	0,
	-50,
	-13,
	-26,
	0,
	0,
	-22,
	0,
	-1,
	-1,
	-7,
	-1,
	-4,
	-6,
	-19,
	-50,
	-50,
	0,
	-26,
	0,
	-1,
	-2,
	0,
	-3,
	-4,
	-7,
	0,
	-4,
	0,
	-19,
	-50,
	-50,
	-13,
	0,
	0,
	2,
	-22,
	1,
	-3,
	-4,
	-11,
	5,
	7,
	-22,
	-7,
	-50,
	-50,
	-1,
	-26,
	0,
	2,
	-22,
	1,
	3,
	3,
	-11,
	-2,
	-7,
	-6,
	-19,
	-50,
	-50,
	-3,
	-26,
	0,
	-13,
	-22,
	0,
	-1,
	-1,
	-7,
	-2,
	-4,
	0,
	-19,
	-50,
	-50,
	-13,
	0,
	0,
	1,
	-22,
	1,
	1,
	1,
	-7,
	2,
	-4,
	1,
	-19,
	-50,
	-50,
	0,
	1,
	0,
	3,
	-2,
	1,
	-11,
	-11,
	-11,
	2,
	7,
	-22,
	-19,
	-50,
	-50,
	3,
	-26,
	0,
	2,
	-22,
	1,
	-11,
	-11,
	-11,
	5,
	-5,
	-22,
	-19,
	-50,
	-50,
	-13,
	-26,
	0,
	-2,
	-22,
	1,
	4,
	4,
	-7,
	-2,
	-4,
	-22,
	-19,
	-50,
	-50,
	-3,
	-26,
	0,
	-2,
	-2,
	0,
	0,
	0,
	-4,
	-1,
	-5,
	-22,
	-7,
	-50,
	-50,
	0,
	-26,
	0,
	-13,
	-22,
	0,
	0,
	0,
	-7,
	0,
	-4,
	-22,
	-19,
	-50,
	-50,
	0,
	-26,
	0,
	0,
	-22,
	1,
	-11,
	-11,
	2,
	3,
	-5,
	-6,
	-7,
	-50,
	-50,
	2,
	-26,
	0,
	3,
	-1,
	1,
	3,
	3,
	-7,
	2,
	-4,
	-6,
	-19,
	-50,
	-50,
	-13,
	-26,
	0,
	-2,
	-22,
	1,
	4,
	4,
	-7,
	2,
	-4,
	-22,
	-19,
	-50,
	1,
	-13,
	-26,
	0,
	1,
	-22,
	1,
	-11,
	-11,
	-4,
	-1,
	-5,
	-22,
	-7,
	-50,
	-50,
	-13,
	-26,
	0,
	0,
	0,
	0,
	-3,
	-4,
	-7,
	-1,
	-4,
	-22,
	-19,
	-50,
	-50,
	-13,
	-26,
	0,
	2,
	-22,
	1,
	-11,
	-11,
	-11,
	-2,
	7,
	-22,
	-19,
	-50,
	-50,
	-13,
	-26,
	0,
	0,
	0,
	0,
	-1,
	-1,
	-7,
	0,
	-4,
	0,
	-19,
	-50,
	-50,
	0,
	0,
	0,
	2,
	-22,
	1,
	-11,
	-11,
	-4,
	-1,
	-7,
	-22,
	-19,
	-50,
	-50,
	0,
	-26,
	0,
	3,
	-22,
	1,
	-11,
	-11,
	-7,
	-2,
	-4,
	-22,
	-19,
	-50,
	-50,
	-13,
	-26,
	0,
	2,
	0,
	1,
	3,
	3,
	-11,
	1,
	-7,
	-22,
	-19,
	-50,
	-50,
	0,
	-26,
	0,
	2,
	-22,
	1,
	-1,
	-1,
	-11,
	-2,
	7,
	-6,
	-19,
	-50,
	-50,
	2,
	-26,
	0,
	0,
	-22,
	1,
	-3,
	-4,
	-4,
	-1,
	7,
	-22,
	-19,
	-50,
	1,
	-13,
	-26,
	0,
	-1,
	-1,
	1,
	-1,
	-1,
	-7,
	5,
	7,
	-22,
	-19,
	-50,
	-50,
	-13,
	-26,
	0,
	1,
	-2,
	1,
	-1,
	-1,
	-7,
	3,
	-4,
	-6,
	-19,
	-50,
	-50,
	1,
	-26,
	0,
	2,
	-22,
	1,
	4,
	4,
	-11,
	5,
	-5,
	-22,
	-19,
	-50,
	-50,
	-13,
	1,
	0,
	1,
	-22,
	1,
	-1,
	-1,
	-11,
	5,
	7,
	-22,
	-19,
	-50,
	-50,
	-13,
	-26,
	0,
	2,
	-22,
	1,
	-11,
	-11,
	1,
	5,
	3,
	-22,
	-7,
	-50,
	-50,
	3,
	-26,
	0,
	1,
	-22,
	0,
	-1,
	-1,
	-7,
	-2,
	-4,
	-22,
	-19,
	-50,
	-50,
	-2,
	0,
	0,
	2,
	-2,
	1,
	3,
	3,
	-7,
	0,
	-4,
	-22,
	-19,
	-50,
	-50,
	-13,
	-26,
	0,
	1,
	-22,
	1,
	3,
	3,
	-7,
	5,
	-4,
	-22,
	-19,
	-50,
	-50,
	-2,
	-26,
	0,
	3,
	-2,
	1,
	-3,
	-4,
	-7,
	0,
	-4,
	-22,
	-19,
	-50,
	-50,
	-13,
	-26,
	0,
	1,
	-22,
	1,
	-3,
	-4,
	-7,
	-1,
	-4,
	-22,
	-19,
	-50,
	-50,
	-3,
	-26,
	0,
	3,
	-22,
	1,
	-11,
	-11,
	2,
	5,
	-5,
	-22,
	-7,
	-50,
	-50,
	-13,
	-26,
	0,
	3,
	-22,
	1,
	-11,
	-11,
	-11,
	3,
	-7,
	-22,
	-19,
	-50,
	-50,
	3,
	-26,
	0,
	0,
	-1,
	0,
	-3,
	-4,
	-7,
	0,
	-4,
	-6,
	-19,
	-50,
	-50,
	-13,
	-26,
	0,
	3,
	-22,
	1,
	-11,
	-11,
	-7,
	5,
	-4,
	-22,
	-19,
	-50,
	-50,
	-2,
	-26,
	0,
	2,
	-22,
	1,
	0,
	0,
	-4,
	-1,
	-5,
	-22,
	-7,
	-50,
	-50,
	-13,
	-26,
	0,
	1,
	-2,
	1,
	-1,
	-1,
	-7,
	-2,
	-4,
	-22,
	-19,
	-50,
	-50,
	-13,
	-26,
	0,
	1,
	-22,
	1,
	-1,
	-1,
	-11,
	0,
	-7,
	-22,
	-19,
	-50,
	-50,
	-2,
	-26,
	0,
];
const p1 = new Perceptron();
// p1.train(Array.from(ULTI, x => x), 1)
// p1.train(Array.from(ULTI, x => x), 1)
// p1.train(Array.from(ULTI, x => x), 1)
// add all value from the words together.
const testSet = [-40, -60, -2, -6, 2];

// p1.train(Array.from(testSet, x => x), 1);
// p1.train([4,6,2,6,2], 1);
// p1.train([4,6,2,6,2], 1);
// p1.train([0,0,0,0,0], 0);
// p1.train([0,0,0,0,0], 0);
// p1.train([0,0,0,0,0], 0);
// p1.train([0,0,0,0,0], 0);
// console.log(p1.predict(testSet)); // return 1
let knownWordsRich = [];
let knownWordsPoor = [];
let wordsAndValues = [];
let person = {};
let listOfPeople = [];
let testSubject;
function TrainPerceptron() {
	for (let i = 7; i < 50; i++) {
		console.log(listOfPeople[i]["status"]);
		let isRich = 0; // 0 = poor
		if (listOfPeople[i]["status"] === "Rich"){
			isRich = 1;
			testSubject = listOfPeople[i]
		}
		p1.train(Array.from(listOfPeople[i]["numbers"], x => x), isRich);
	}
	p1.learn(); // P1 ready.
	console.log("Perceptron trained!")
}
function MakePrediction(){
	console.log(testSubject)
	console.log(p1.predict(Array.from(testSubject["numbers"], x => x)));
	for (let i = 0; i < listOfPeople.length ; i++) {
		const inputs = Array.from(listOfPeople[i]["numbers"], x => x);
		const result = p1.predict(inputs);
		console.log(result)
	}
}

function AddToKnownWords(word, destArray) {
	let wordKnown = destArray.find(knownWord => knownWord.propName === word.propName);
	if (!wordKnown) destArray.push(word);
	else wordKnown.weight++
}

function GenerateWordAndValues() {
	knownWordsPoor.map(word =>{
		let otherValue = knownWordsRich.find(rWord => rWord.propName === word.propName);
		if (otherValue){
			let wordAndValue = {propName: word.propName, weight: otherValue.weight - word.weight};
			wordsAndValues.push(wordAndValue);
		}else{
			let wordAndValue = {propName: word.propName, weight: word.weight};
			wordsAndValues.push(wordAndValue);
		}
	})
}

function CreatePoints(listOfPeople) {
	let personInNumbers = [];
	listOfPeople.map(person => {
		if (person[person.length - 1] === "<=50K") {
			for (let i = 0; i < person.length - 1; i++) {
				let propName = person[i];
				let ammountInArray = countInArray(person, propName);
				let word = {propName: propName, weight: ammountInArray};
				AddToKnownWords(word, knownWordsPoor);
			}
			person.status = "Poor";
		} else {
			for (let i = 0; i < person.length; i++) {
				let propName = person[i];
				let ammountInArray = countInArray(person, propName);
				let word = {propName: propName, weight: ammountInArray};
				AddToKnownWords(word, knownWordsRich);
			}
			person.status = "Rich";
		}
	});
	GenerateWordAndValues();
	listOfPeople.map(person => {
		person.map(prop => {
			let propValue = wordsAndValues.find(word => word.propName === prop);
			if (propValue) personInNumbers.push(propValue.weight);
			else personInNumbers.push(0);
		});
		person.numbers = personInNumbers;
	});
	ShowKnownWords();
}

async function ReadData() {
	const file = document.getElementById('csvFile').files[0];
	const reader = new FileReader();
	reader.readAsText(file);
	reader.onload = async function (e) {
		listOfPeople = await csvJSON(e.target.result);
		CreatePoints(listOfPeople);
	};
}

async function csvJSON(csv) {
	const lines = csv.split("\n");
	let result = [];
	for (let i = 0; i < 50; i++) {
		const personData = lines[i].split(", ");
		result.push(personData);
	}
	return result;
}

function countInArray(array, what) {
	return array.filter(item => item === what).length;
}

function ShowKnownWords() {
	let textnode;
	let node;
	for (let i = 0; i < wordsAndValues.length; i++) {
		node = document.createElement("LI");
		textnode = document.createTextNode(wordsAndValues[i].propName + " : Weight = " + wordsAndValues[i].weight);
		node.appendChild(textnode);
		document.getElementById("poorWords").appendChild(node);
	}
	// for (let i = 0; i < knownWordsRich.length; i++) {
	// 	node = document.createElement("LI");
	// 	textnode = document.createTextNode(knownWordsRich[i].propName + " : Weight = " + knownWordsRich[i].weight);
	// 	node.appendChild(textnode);
	// 	document.getElementById("richWords").appendChild(node);
	// }
	// for (let i = 0; i < knownWordsPoor.length; i++) {
	// 	node = document.createElement("LI");
	// 	textnode = document.createTextNode(knownWordsPoor[i].propName + " : Weight = " + knownWordsPoor[i].weight);
	// 	node.appendChild(textnode);
	// 	document.getElementById("poorWords").appendChild(node);
	// }

}